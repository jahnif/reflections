When would you want to use a remote repository rather than keeping all your work
local?

    Backing it up, syncing work with other people

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    If you're working on a collaborative project and all updates were automatically pulled, there's a chance some of your work could be overwritten.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    - Clones are local - good for copying information from GitHub or duplicate a local project.
	- Forks are clones on GitHub - good for copying someone else's project and working on your own version of it.
	- Branches isolated iterations of the same project and can exist locally or on GitHub - good for creating new features, ensuring they work correctly and then merging them back into the master branch.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    You can combine any changes you've made on your branch with those made in the remote directory, merge them, and sync everything again.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    Likely using a tool like Google Docs or a real time code editor. The version management in something like Google Docs would be easier, as you wouldn't have to spend as much time creating branches, merging, committing, etc. You could just make changes. However, it would be much more difficult to have the same functionality as branching, merging, etc. 

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Changing a branch allows you to essentially create a sandbox, build new things, test new features - all without messing up the core functionality of the master branch.
